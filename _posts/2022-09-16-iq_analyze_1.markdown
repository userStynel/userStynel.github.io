---
layout: article
title:  "Inigo Quilez의 SDF 함수 분석 1: Sphere ~ Capped Torus"
categories: graphics
---
2D 사진에서 이미지를 점으로 표현하는 픽셀 방식과 수식으로 표현하는 벡터 방식이 있는 것 처럼, 3D 그래픽에서도 물체를 삼각형의 세 점을 이용해서 나타내는 폴리곤 방식과 수식으로 나타내는 레이 마칭(Ray Marching) 방식이 있습니다

레이 마칭 방식을 이용해서 물체를 그려내기 위해서는 특정 위치에서 물체의 표면과의 최소 거리를 나타내는 함수가 필요한데 이것을 SDF(Signed Distance Function: 부호 있는 거리 함수)라고 합니다
어떤 점에 대한 SDF 값이 0이면 그 점은 물체의 표면에, 양수이면 물체의 바깥에, 음수이면 물체의 안에 존재합니다

[Inigo Quilez](https://iquilezles.org/articles/distfunctions/)라는 사람이 다양한 도형에 대한 SDF 함수를 본인의 홈페이지에 올렸으나 처음 보는 사람들에게는 코드가 직관적으로 이해하기 힘든 감이 없지 않아 개인적으로 느겼던 시행착오를 바탕으로 제 나름대로의 방식으로 설명 하고자 합니다

1. Sphere (구)

<img src = "/IMGS/iq_analyze_1/1_sphere.png">
{% highlight glsl %}
float sdSphere(vec3 p, float r)
{
  return length(p)-r;
}
{% endhighlight %}

위 함수는 (0, 0, 0)을 중심으로 거리가 r인 구에 대한 SDF 입니다, p는 검사를 하기 위한 특정 점의 좌표이고, r는 구의 반지름 입니다

구는 거리가 같은 점들의 집합이기 때문에 원점에서 p까지의 거리에서 반지름을 뺀 값이 0이면은 p는 구 표면에 존재하고, 양수이면 구 바깥, 음수이면 구 내부에 존재합니다

2. Plane (평면)

<img src = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Plane_equation_qtl3.svg/1920px-Plane_equation_qtl3.svg.png" width = "512px" height = "512px">

{% highlight glsl %}
float sdPlane(vec3 p, vec3 n)
{
  return dot(p,n);
}
{% endhighlight %}

위 함수는 점 (0, 0, 0)를 지나고 법선 벡터가 n인 평면의 SDF 입니다, 만약에 p가 평면의 표면 위의 점 일때는, 벡터 p와 평면의 법선벡터의 각이 90도 이므로 내적을 하면 0이 나옵니다

평면 위의 점인 경우에는 벡터 p와 벡터 n 사이의 각이 [0, 90)의 범위를 가지므로 내적을 하면 양수가 나오고, 평면 아래의 점인 경우에는 벡터 p와 벡터 n 사이의 각이 (90, 180)의 범위를 가져 내적을 하면 음수가 나옵니다

 3. Box (직육면체)

<img src = "/IMGS/iq_analyze_1/2_box.png">

{% highlight glsl %}
float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q, 0.0)) + min(max(q.x,max(q.y,q.z)), 0.0);
}
{% endhighlight %}

위 함수는 원점이 직육면체의 중심에 있고, 오른쪽 위 모서리로 b를 가지는 직육면체에 대한 SDF 입니다, 이 부분은 개인적으로 직관적으로 이해하기 까다로웠기에 하나 하나 분석을 해 보겠습니다

먼저 vec3 q = abs(p) - b; 이 부분에서 abs(p)는 p의 각 원소의 절대값을 가지는 벡터를 반환합니다

대칭성을 이용해서 점 p가 1사분면~8사분면에 있을때의 8가지 경우의 수를 각각 구해야했던것을 하나로 줄입니다

그리고 q는 abs(p)의 점 b에 대한 상대적 위치를 나타냅니다

만약에 점 p가 직육면체의 내부나 표면에 있으면 q의 각 원소는 음수 또는 0을 가지므로 max(q, 0.0)은 영벡터가 되므로 length(max(q, 0.0))은 0이 됩니다, 그러면 p가 직육면체의 외부에 있을때는 양수를 가지지만, 내부에 있을때와 표면에 있을 때 둘다 0을 반환하므로 min(max(q.x,max(q.y,q.z)), 0.0) 함수를 이용해서 직육면체의 내부에 있을때는 음수를, 표면에 있을때는 양수를 반환하게 됩니다

 4. Round Box (둥근 모서리를 가지는 직육면체)

<img src = "/IMGS/iq_analyze_1/3_roundBox.png">

{% highlight glsl %}
float sdRoundBox(vec3 p, vec3 b, float r )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;
}
{% endhighlight %}

위 함수는 원점이 직육면체의 중심에 있고, 오른쪽 위 모서리로 b를 가지는 직육면체의 표면에 반지름의 길이가 r인 구가 감싸 모서리가 둥근 모양의 직육면체 입니다, 직육면체의 SDF length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0)에서 r를 빼 직육면체의 모서리로 부터 거리가 r 떨어져 있는 모든 점에 대해 0을 반환합니다

 5. Box Frame

<img src = "/IMGS/iq_analyze_1/4_boxFrame.png">

{% highlight glsl %}
float sdBoxFrame( vec3 p, vec3 b, float e )
{
	vec3 q = abs(p)-b;
	vec3 q2 = abs(q+e)-e;
	return min(min(
      length(max(vec3(q.x,q2.y,q2.z),0.0))+min(max(q.x,max(q2.y,q2.z)),0.0),
      length(max(vec3(q2.x,q.y,q2.z),0.0))+min(max(q2.x,max(q.y,q2.z)),0.0)),
      length(max(vec3(q2.x,q2.y,q.z),0.0))+min(max(q2.x,max(q.y,q2.z)),0.0));
}
{% endhighlight %}

위 함수는 원점이 직육면체의 중심에 있고, b를 오른쪽 위 모서리로 가지며 모서리로 부터 [0, e] 범위의 있는 점을 그리는 도형에 대한 SDF 입니다

q는 b에 대한 상대적인 위치를 나타내고, q2의 각 원소는 축보다 -e 만큼 범위가 있을때만 음수가 되고, 그 바깥에 대해서는 축과의 거리에서 e를 뺀 양수의 값이 됩니다

 min(min(length(max(vec3(q.x,q2.y,q2.z),0.0))+min(max(q.x,max(q2.y,q2.z)),0.0),

 length(max(vec3(q2.x,q.y,q2.z),0.0))+min(max(q2.x,max(q.y,q2.z)),0.0)),

 length(max(vec3(q2.x,q2.y,q.z),0.0))+min(max(q2.x,max(q.y,q2.z)),0.0));

는 각각 아래 그림의 3개의 조각 중 하나에 점이 포함 되있는지 검사하는 함수이며 아래의 세 조각 중 하나라도 p가 포함 되면 0을 반환합니다

<img src = "/IMGS/iq_analyze_1/boxframe_explaine.png">

 6. Torus

<img src = "/IMGS/iq_analyze_1/5_torus.png">

토러스는 특정 점을 중심으로 반지름 r1을 가진 원의 둘레를 따라 원의 둘레의 한 점을 중심으로 잡고 반지름 r2를 가진 원을 수직으로 한 바퀴 두른 도넛 모양이고 아래의 움직이는 그림을 보면 이해하기 쉽습니다

<img src = "https://upload.wikimedia.org/wikipedia/commons/e/e7/Sphere-like_degenerate_torus.gif">

{% highlight glsl %}
float sdTorus( vec3 p, vec2 t )
{
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return length(q)-t.y;
}
{% endhighlight %}

위 함수는 원점 을 중심으로 t.x에는 큰 반지름, t.y에는 작은 반지름의 길이를 가지는 토러스에 대한 SDF 입니다

<img src = "/IMGS/iq_analyze_1/torus_explaine.png">

위의 그림 처럼 length(q)는 토러스를 p의 방향으로 자를때 단면 원의 중심에서 p까지의 거리가 됩니다, p가 토러스는 표면에 있는을 때는 0을 반환하고, 외부에 있을때는 양수, 내부에 있을때는 음수를 반환합니다

 7. Clapped Torus

 <img src = "/IMGS/iq_analyze_1/6_clappedTorus.png">

{% highlight glsl %}
float sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)
{
  p.x = abs(p.x);
  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);
  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;
}
{% endhighlight %}

위의 토러스의 식과 달리 xy 평면과 평행인 상태입니다 sc.x에는 사인 값이 sc.y에는 코사인 값이 들어있는데 유의해야 할 점은 각도가 y축에서 x축으로 향하는 방향입니다, 먼저 토러스가 y축 대칭임을 이용해서 p의 x 값의 절대값을 씌워서 올려 줍니다, 그리고 $sc.y * p.x > sc.x * p.y$ 를 $sc.y / sc.x > py / px$로 바꾸어주면 점 p의 (y축의 관점에서의) 기울기가 회전 범위에 포함 됬을때는 k를 p.xy로 하고 회전 범위 밖이면 끝 선분에 수선을 그은 길이임을 알 수 있습니다

<img src = "/IMGS/iq_analyze_1/clappedtorus_explaine.png">

그리고 점과 표면의 거리는 위 그림을 이용해서 $||p||^2 - k^2 + (R_a-k)^2 = ||p||^2 + R_a^2 - 2R_aK$ 임을 알 수 있습니다